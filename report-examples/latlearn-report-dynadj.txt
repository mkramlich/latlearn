Latency Report (https://github.com/mkramlich/latlearn)

latlearn_should_subtract_overhead: true
metric treated as overhead: LL.no-op, min
since LL init: 7,034,808,749 ns

Go ver:         go1.20.4
GOARCH:         amd64
GOOS:           darwin
NumCPU:         4
GOMAXPROCS:     4
NumGoroutine:   1
SetMemoryLimit: 9,223,372,036,854,775,807 bytes
GOGC:           
kern.ostype                : Darwin
kern.osproductversion      : 10.15.3
kern.osrelease             : 19.3.0
kern.osrevision            : 199506
kern.version               : Darwin Kernel Version 19.3.0: Fri Jan 10 21:15:49 PST 2020; root:xnu-6153.81.5~4/RELEASE_X86_64
user.posix2_version        : 200112
machdep.cpu.brand_string   : Intel(R) Core(TM) i3-1000NG4 CPU @ 1.10GHz
machdep.cpu.core_count     : 2
machdep.cpu.thread_count   : 4
machdep.memmap.Conventional: 8380841984
hw.memsize                 : 8589934592
hw.pagesize                : 4096
hw.cpufrequency            : 1100000000
hw.busfrequency            : 400000000
LINES:          ?
COLUMNS:        ?
HOST:           
TERM:           xterm-256color


span                           :        min (ns) |       last (ns) |        max (ns) |       mean (ns) | weight (B&As) |   time frac | span                 
LL.no-op                       :              75 |               5 |         341,379 |              10 | w   1,000,000 | tf 0.012118 | LL.no-op             
LL.fn-call-return              :               3 |               6 |              35 |               7 | w       1,000 | tf 0.000012 | LL.fn-call-return    
LL.for-iters(n=1000)           :             339 |             346 |             447 |             343 | w       1,000 | tf 0.000059 | LL.for-iters(n=1000) 
LL.accum-ints(n=1000)          :             348 |             353 |             472 |             354 | w       1,000 | tf 0.000061 | LL.accum-ints(n=1000)
LL.add-int-literals(n=2)       :               4 |               6 |              35 |               7 | w       1,000 | tf 0.000012 | LL.add-int-literals(n=2)
LL.add-str-literals(n=2)       :               3 |               5 |              31 |               7 | w       1,000 | tf 0.000012 | LL.add-str-literals(n=2)
LL.map-str-int-set             :              23 |              27 |             370 |              28 | w       1,000 | tf 0.000015 | LL.map-str-int-set   
LL.map-str-int-get(k=100,key0) :              16 |              55 |           1,687 |              44 | w       1,000 | tf 0.000017 | LL.map-str-int-get(k=100,key0)
LL.map-str-int-get(k=100,key49):              16 |              96 |           1,047 |              61 | w       1,000 | tf 0.000019 | LL.map-str-int-get(k=100,key49)
LL.map-str-int-get(k=100,key99):              18 |              35 |          37,519 |             103 | w       1,000 | tf 0.000025 | LL.map-str-int-get(k=100,key99)
LL.span-map-lookup             :              13 |              18 |             156 |              18 | w       1,000 | tf 0.000013 | LL.span-map-lookup   
LL.sort-strs(n=10)             :             312 |             812 |          17,199 |             379 | w       1,000 | tf 0.000065 | LL.sort-strs(n=10)   
LL.log-hellos(n=10)            :          43,911 |          43,911 |          43,911 |          43,911 | w           1 | tf 0.000006 | LL.log-hellos(n=10)  
LL.benchmarks-total            :     187,037,610 |     187,037,610 |     187,037,610 |     187,037,610 | w           1 | tf 0.026587 | LL.benchmarks-total  
LL.lat-report                  : ???,???,???,??? | ???,???,???,??? | ???,???,???,??? | ???,???,???,??? | w ???,???,??? | tf ???????? | LL.lat-report        
loop                           :       1,441,285 |      22,676,231 |     231,981,753 |      85,556,762 | w          80 | tf 0.972954 | loop                 
loop(dyn_adjust=false)         :      21,053,661 |      96,726,432 |     231,981,753 |     121,203,941 | w          40 | tf 0.689167 | loop(dyn_adjust=false)
loop(dyn_adjust=true)          :       1,441,285 |      22,676,231 |     209,439,352 |      49,909,584 | w          40 | tf 0.283787 | loop(dyn_adjust=true)
